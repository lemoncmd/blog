<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on だらだらと技術ブログ</title>
    <link>https://blog.anzu.tech/post/</link>
    <description>Recent content in Posts on だらだらと技術ブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 08 Apr 2020 20:25:57 +0900</lastBuildDate>
    
	<atom:link href="https://blog.anzu.tech/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2時間でコンパイラを作った話</title>
      <link>https://blog.anzu.tech/post/2hour_compiler/</link>
      <pubDate>Wed, 08 Apr 2020 20:25:57 +0900</pubDate>
      
      <guid>https://blog.anzu.tech/post/2hour_compiler/</guid>
      <description>※注意：この記事を読む前に異世界の難解プログラミング言語「lex」の紹介を読むことをお勧めします。
まへがき 私は電車に揺られながらオフ会会場へと向かっていた。
移ろいゆく景色を眺めながら、そこはかとなく
あーコンパイラ作らないとな
と思った。
What&#39;s happened? とあるオフ会にてスライド発表をしよう！ということになりました。
それで私はせっかくプログラミング言語の仕様を作ったのにこれを用いない手はない！ と思ったんですよ。
それで、以下を用意する手はずだったんです。
 スライド コンパイラ(或いはインタプリタ) 気合  当日の朝。なにも用意できませんでした。
おはようございます。
あえて言うならば気合だけは用意できました。
そこで、何が何でも発表するため、スライドはhsjoihs氏に用意してもらえることになったので、私は行きの電車内の2時間でコンパイラを作成することにした。
ほんぶん コンパイラ(インタプリタ)を作る言語 2時間で作れる規模のコンパイラを作るにあたり、私が手癖で書ける言語といえばJavaScriptしかありませんでした。(それが後々功を奏した)
というわけでまずはindex.htmlとindex.jsを作成します。
CSSだァ？そんなもの要るわけねぇだろ！
HTMLに必要なものは
 コード書く場所 出力する場所 実行ボタン ぐらいなので、これだけ書いてさっさとJavaScriptに移りましょう。(※実物のコードにインデントは無い)  &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;script src=&amp;#34;index.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; program:&amp;lt;br&amp;gt; &amp;lt;textarea id=&amp;#34;program&amp;#34; rows=&amp;#34;10&amp;#34; cols=&amp;#34;64&amp;#34;&amp;gt;&amp;lt;/textarea&amp;gt;&amp;lt;br&amp;gt; output:&amp;lt;br&amp;gt; &amp;lt;textarea id=&amp;#34;output&amp;#34; rows=&amp;#34;10&amp;#34; cols=&amp;#34;64&amp;#34;&amp;gt;&amp;lt;/textarea&amp;gt;&amp;lt;br&amp;gt; &amp;lt;input type=&amp;#34;button&amp;#34; onclick=&amp;#34;/*あとで*/&amp;#34; value=&amp;#34;run&amp;#34;&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; インタプリタの仕様 インタプリタは大体以下の構造で動きます。ちなみにコンパイラとインタプリタの違いは出力先がruntimeか機械語かの違いです(ほんまか？)。
しかし、ここでは2時間で仕上げるために以下を削ります。
簡単な言語なのでtokenizerはString.prototype.splitに任意長の空白を意味する正規表現を流すだけで区切れます。
const tok = src.split(/\s+/); また、これから作る「lex」言語はプログラムの順番とIR(中間表現)の順番が大体同じという言語特徴を持っているので、パーサーとコードジェネレーターをくっつけることができます。
そして最適化は2時間クオリティに必要ありませんよね？
パーサー(兼コードジェネレーター) この「lex」言語は、LL(1)文法で記述できる言語、という分類をされます。</description>
    </item>
    
    <item>
      <title>V言語でCコンパイラを作った話</title>
      <link>https://blog.anzu.tech/post/vcc/</link>
      <pubDate>Tue, 24 Dec 2019 10:14:08 +0900</pubDate>
      
      <guid>https://blog.anzu.tech/post/vcc/</guid>
      <description>参考元：低レイヤを知りたい人のためのCコンパイラ作成入門
ソースコード：C compiler written in V
Twitterモーメント：VCC開発日記まとめ V言語HP：The V Programming Language
Cコンパイラを作ろうとした話  をとこもすなるCコンパイラ作成といふものを、杏もしてみむとてするなり。
 昨年(2018年)のセキュリティ・キャンプでruiu氏講師のC言語コンパイラ作成講座が開かれた。
当時私はTLでhsjoihs氏がやってるのを見てて楽しそうだなーと思う反面分からんという気持ちが多く、それを横目にCPUをガリガリ書いてた。
時は変わって今年(2019年)の6月あたり、V言語というモダンでシンプルかつ安全な言語を謳ったプログラミング言語がオープンソースになってリリースされた。
6月時点では(さすがに個人開発だったため)実装が甘く散々に批判されていたが、最近はだいぶバグも減って喧伝されていた機能も追加されてきている。
そんな中、ゲテモノを食うのが好きだった私はそのコミュニティの観察が趣味になっていた。
貢献してみたい気持ちも山々だけども、私が何かできるとしたら周辺の標準ライブラリ関連だけで、中心のコンパイラに関しては何の理解もしていなかった。
なので、何かコンパイラを勉強できるものはないか探していた。
Googleで一番最初に出てきたのが参考元のruiu氏の「低レイヤを知りたい人のためのコンパイラ作成入門」だった。(SEO強すぎでは)
この文書は、セキュリティ・キャンプでの講義の内容が元になっているらしく、先人たちの 屍 知見が多いため参考になろう。
そして手元にあったV言語で私はC言語のコンパイラを書き始めたのだった&amp;hellip;
ビルド・実行方法 V言語のインストール まず、私の環境はWindows上のWSLで、ディストリビューションはUbuntu16.04で動かしている。基本的にV言語はUnix系OSやWindowsのMingwなどがサポートされているので、適当な環境を作成すれば動く。
まずはgitをインストールする。パッケージコマンドは環境依存なので、適宜(yumやらbrewやら)に置き換えて読んでほしい。
$ sudo apt update $ sudo apt install git gitをインストールしたら、V言語のソースコードをGitHubからダウンロードしてビルドする。
$ git clone https://github.com/vlang/v $ cd v $ make ビルドが終わったら、vコマンドを使えるようにするために、リンクを作成する。
$ sudo ./v symlink これでvコマンドが使えるようになる。また、これからもしV言語をアップデートしたくなれば、v upと打つだけでアップデートが開始する。
VCCのビルド 次に、VCCのビルドをしていく。
まずはVCCのソースコードをGitHubからダウンロードする。
$ git clone https://github.com/lemoncmd/vcc 終わったら、VCCのディレクトリに移り、ビルドする。
$ cd vcc $ make これで、vccという実行ファイルが作成される。</description>
    </item>
    
    <item>
      <title>異世界の難解プログラミング言語「lex」の紹介</title>
      <link>https://blog.anzu.tech/post/lex/</link>
      <pubDate>Thu, 12 Dec 2019 14:18:20 +0900</pubDate>
      
      <guid>https://blog.anzu.tech/post/lex/</guid>
      <description>これは悠里・大宇宙界隈 Advent Calendar 2019の12日目の記事です。
異世界とはなんぞや？ 「悠里」とは？ まず、 総合創作界隈『悠里』 について説明。
 「悠里(Jurli/Yuuri)」とは、人工言語ユーゴック語と、人工言語リパライン語を主軸として架空世界を展開していくものです。架空世界の持つ文化、風土、歴史、宗教、人種など、さまざまな観点から創作していく総合創作です。
(悠里概説 - 悠里総合サイトより引用)
 つまるところ、人工言語を中心に世界観を創作する界隈です。 ユーゴック語やリパライン語のほかにも、ざっくり十数言語以上は創作されています。
他にも、科学的なことから果てはボドゲまで作られてたり。
「FAFss」とは？ FAFss とは、悠里内の組織の一つで、主に計算機科学をやっていく集団。
様々なプログラミング言語やらアセンブリやらCPUやらが作られている。ヤバ。
架空世界の方にもFAFssという組織があり、そっちでは †革新的計算機† が作られたという設定。
なぜか筆者はFAFssとかいう頭おかしい集団にねじ込まれているので、ブログに頭おかしい成果を残そうと思いました。
「lex」とは？ 悠里の主要言語の一つであるリパライン語には、&amp;ldquo;lex&amp;rdquo; という頭おかしい単語があります。
リパライン語辞書にはこのように記載されています。
 【接続詞】【名詞】【前置詞】特別な三つの用法を持つ
[語法]
la lex
後置した文の前の文全体、一部を主語、目的語にする
eo lex
助動詞の意味を後に来る句の動詞に適用しない
lex V
動詞の連体形を作る。
 これを悪用活用しました。
異世界の難解プログラミング言語「lex」 「lex」概要 lex はスタック指向の難解プログラミング言語です。これは草稿段階なのでいろいろできないことあります。
lexは基本的には全てのデータがFILO(First-In Last-Out)のデータ構造であるスタックに保存されます。 そしてそのスタック上のデータをこねくり回していろいろします。
以下のプログラムは、lexで最も簡単なプログラムの一つです。
lex vintifarlirges la lex . このプログラムでは、自分自身を返すvintifarlirges(リパライン語で「自己同一化する」)という関数を定義しています。
プログラミング言語「lex」って何の略？ 「lex」とは、
lex es xlaisoss の略で、「『lex』は命令列」と、「～を行う命令列」という二つの意味があります。
関数定義 関数を定義するには、lex Vというキーワードを用います。以下のVには関数名を、続けてプログラムの内容を、最後にピリオドで区切ります。
lex V プログラム .</description>
    </item>
    
    <item>
      <title>ブログ始めたよー</title>
      <link>https://blog.anzu.tech/post/test/</link>
      <pubDate>Mon, 09 Dec 2019 13:07:46 +0900</pubDate>
      
      <guid>https://blog.anzu.tech/post/test/</guid>
      <description>ブログを始めた 上着を着てもまだ肌寒く、木々はその葉を落とした。
街は師走。クリスマスも近づき浮かれている中。
そんな12月は、技術者にとってはアドベントカレンダーの季節。
布団の誘惑に負けず(ほんまか？)、出席した大学の講義中にササっとブログを作りました。
三日坊主で終わりそうな気もしないでもないけど、少なくともカレンダーに登録した分はこのブログに記そうと思う。
カスタムドメイン x GitHub pages x hugo 10月下旬、突然カスタムドメインが欲しくなり、そそくさと anzu.tech を購入した。
特に理由しかないが、ドメインを取るならば anzu か lemon がいいなーと思ってた。
ちょうど新しめなトップレベルドメインである .tech がお名前ドットコムで空いてたので即購入。
そのまま一か月以上放置。
そのままだといけないと思い、アドベントカレンダーの季節になったので、ブログを作るべくQiitaをあさった。
参考にしたのはここ。Hugo + GitHub Pages でブログのプロトタイプを構築してみた。
私はwslのUbuntuを用いているので、brewではなくaptでインストール。
&amp;hellip;と思ったらテーマを入れたらhugoがエラーを吐く。 どうやらUbuntu16.04のパッケージに入っているhugoはバージョンがv0.16とかで(現在はv0.60)すごく古いので、GitHubのhugoの最新リリースからdebをダウンロードしてきてインストール。
使用しているテーマはm10cという物。友人にこれがいいんじゃないって言われて入れた。自分で決めるのはめんどいので。 そしてGitHubにアップロードし終わったら、githubのリポジトリのSettings＞Optionsから、GitHub PagesのSourceを設定。
さて、ここからはカスタムドメインを設定していくが、お名前ドットコムのドメイン設定からDNSレコードを設定する。
URLは blog.anzu.tech にし、レコードの種類をCNAME、元ドメインを lemoncmd.github.io にする。
ここですぐにGitHubに設定してもhttpsにならないので、設定がなじむまで 一日ゆっくりと待つ。 なんか一時間もかからなかった。一回テストでやったときは丸一日かかったんだけどなぁ。ともかくよし。
最後にGitHub Pagesの設定からCustom domainを設定して終了。 お疲れ様、私。
ブログの用途 さて、これからの予定は、このエントリを母校OBアドベントカレンダーに登録。
次に、悠里(言語系創作サークル)のアドベントカレンダーに創作難解プログラミング言語の草稿みたいなのを登録。
最後に、OUCC(大学のコンピューターサークル)のアドベントカレンダーに今作っているコンパイラに関するエントリでも。
それ以降の用途は&amp;hellip;し～らない！</description>
    </item>
    
  </channel>
</rss>